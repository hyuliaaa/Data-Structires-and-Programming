
#include <iostream>
using namespace std;

template <class T>
struct Node
{
	T data;
	Node<T> * left;
	Node<T> *right;
};

Node <int> * createTree()
{
	Node <int> * r12 = new Node <int>();
	r12->data = 8;
	r12->left = NULL;
	r12->right = NULL;

	Node <int> * r11 = new Node <int>();
	r11->data = 6;
	r11->left = NULL;
	r11->right = NULL;

	Node <int > * r1 = new Node <int>();
	r1->data = 7;
	r1->left = r11;
	r1->right = r12;

	Node <int> * l12 = new Node <int>();
	l12->data = 4;
	l12->left = NULL;
	l12->right = NULL;

	Node <int> * l11 = new Node <int>();
	l11->data = 2;
	l11->left = NULL;
	l11->right = NULL;


	Node <int> * l1 = new Node <int>();
	l1->data = 3;
	l1->left = l11;
	l1->right = l12;

	Node <int> * root = new Node <int>();
	root->data = 5;
	root->left = l1;
	root->right = r1;


	return root;


}

int sum(Node <int> * root)
{
	if (root == NULL)
    {
        	return 0;
    }
	return root->data + sum(root->left) + sum(root->right);
}

int height(Node <int> *root)
{
    if (root==nullptr)
    {
        return 0;
    }
    else
    {
        return 1+ height(max(root->left, root->right));
    }
}

template <class T>
bool isEmpty(Node <int> *root)
{
    return root==nullptr;

}






template <class T>

Node<T>* findElement(Node<T>* root, T element)
{
    if (root==nullptr)
        return nullptr;

    if (root->data==element)
    {
        return root;
    }
    else if(root->data > element)
    {
        return findElement(root->left,element);
    }
    else
    {
        return findElement(root->right, element);
    }
}


int sumLeaves(Node <int> * root)
{
    if (root==nullptr)
        return 0;

    if (root->left==nullptr && root->right==nullptr)
    {
        return root->data;
    }

    return sumLeaves(root->left)+sumLeaves(root->right);
}




int main() {


   Node <int> * root=createTree();
   cout<<sum(root)<<endl;
   cout<<height(root)<<endl;
   cout<<sumLeaves(root);

   cout<<findElement(root, 9);
	return 0;

}


